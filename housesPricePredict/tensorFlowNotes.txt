// create a tensor 
const data = tf.tensor([1,2,3,4])

// get the shape of a tensor
const data2 = tf.tensor([5,6,7,8])

// adding valuos of elements with same indexes
data.add(data2)

// add is non destructive, a new tensor is generated, the originals remain immutable
// subtract, divide, multiply
data.sub(data2)
data.div(data2)
data.mul(data2)

// in element wise operations, the shape of the tensors must match
// with some exceptions

const data3 = tf.tensor([
  [1,2,3,4], 
  [1,2,3,4]
  ]
);

const data4 = tf.tensor([
  [5,6,7,8], 
  [1,2,3,4]
  ]
);

data3.add(data4)

// Broadcasting works when: take the shape of both tensors
// from r to l, the shapes are equal or one is '1'

// this tensor is shape [2][4]
const data5 = tf.tensor([
  [1,2,3,4], 
  [5,5,3,4], 
  ]
)


// this tensor is shape [2][1]
const data6= tf.tensor([[6], [1]])

// la comparación es
    ||
    \/
[2][4]  
[2][1]


// si es posible el Broadcasting
el resultado es:
[
    [7, 8, 9, 10], 
    [6, 6, 4, 5 ]
]

// se ve mejor así

[
  [1,2,3,4],
  [5,5,3,4], + [
                 [6],
                 [1]
                  ]
]

// donde [0,0] se suma a [0] y [1,0] se suma a [1]
//LOGGING OUT A TENSOR
// para imprimir el tensor bonitico, tensor.print()
// Tensor
    [[1, 2, 3, 4],
     [5, 5, 3, 4]]

// pero para extraer el valor de un índice
// GETING A SINGLE VALUE
data.get(indice)

data5.get(0,1) // 2

// para obtener varios valores a la vez, usamos slice
// SLICING
const building = tf.tensor([
  [1,2,3,4], 
  [5,5,8,4],
  [5,8,7,4],
  [5,9,1,4],
  [5,0,0,4],
 ]
);

// params: start index, size(number of rows, number of columns)
building.slice([0,1],[5,1]) // const building = tf.tensor([

  [1,2,3,4], 
  [5,5,8,4],
  [5,8,7,4],
  [5,9,1,4],
  [5,0,0,4],

 ]

);

// params: start index, size(number of rows, number of columns)

building.slice([0,1],[5,1]) // [[2], [5], [8], [9], [0]]
// UNKNOWN ROW COUNT
// cuando no sabemos el número de filas 
// opción 1
building.shape donde [x,y] x es el numero de filas
building.slice([0,1], [data.shape[0], 1])

// opción 2
building.slice([0,1], [-1, 1])

building.slice([1,2], [-1, 1]) // [[8], [7], [1], [0]]

// CONCATENATION

const tensorA = tf.tensor([
  [1,2,3,4], 
  [5,6,7,8],
 ]
);

const tensorB = tf.tensor([
  [9,10,11,12], 
  [13,14,15,16],
 ]
);

const tensorC = tensorA.concat(tensorB)

// tensor C is
Tensor
    [[1 , 2 , 3 , 4 ],
     [5 , 6 , 7 , 8 ],
     [9 , 10, 11, 12],
     [13, 14, 15, 16]]

const tensorD = tensorA.concat(tensorB, 1)

// tensor D is
Tensor
    [[1, 2, 3, 4, 9 , 10, 11, 12],
     [5, 6, 7, 8, 13, 14, 15, 16]] 

// 0 is default and Y axis
// 1 is X axis. Remember 8-> 1-> 3->

// SUM
// sum without params adds all the values in a tensor
// sum reduces dimensions, unless we pass true as second argument
// that parameter corresponds to "keep dimension"

tensorB.sum() // 100
// sum with params adds all the values in row or column, 1 for all values in a row
tensorB.sum(0) // [22, 24, 26, 28]
tensorB.sum(1) // [42, 58]

